#partition array 
#Seth Shickluna-Pierce 


.data 

#each "word" is allocated 4 bytes so traversing the list just requires moving pointer by 4 
array: 		.word 76, 32, 21, 44, 21, 90, 1, 11, 61, 81, 92, 3, 5, 2, 8, 38, 63
newLine:	.asciiz "\n" 
label_One: 	.asciiz "Unsorted: "
label_Two: 	.asciiz "Sorted: "

.text 

#print label one 
la $a0, label_One #load word 
li $v0, 4 #print string
syscall

#newline
la $a0, newLine #load word 
li $v0, 4 #print string
syscall

jal printArray 

#newline
la $a0, newLine #load word 
li $v0, 4 #print string
syscall

#print label one 
la $a0, label_Two #load word 
li $v0, 4 #print string
syscall

#newline
la $a0, newLine #load word 
li $v0, 4 #print string
syscall

#sort the array 
jal bubbleSort


jal printArray #print changed array 

end: 
	#end the program 
	li $v0, 10 
	syscall 
	
printArray: #procedure to print the given array 
	
	#reset our counter register 
	move $t0, $zero 
	
	printNum: 
		#counter for the location in memory
		lw $a0, array($t0) #print out the number at $t0 
		li $v0, 1 #print int syscall 
		syscall
		
		li $a0, 32 #load space
		li $v0, 11 #print int string
		syscall
		
	addi $t0, $t0, 4 #add for to the counter 
	bne $t0, 68, printNum #basically we know the length of the array so we hardcode that many bits + 4 for this program
	
	jr $ra 
	
bubbleSort: 

	move $t0, $zero # counter 1 for loop 	
	move $t5, $zero # counter 1 for loop 	

	loop_1: 
		bgt $t5, 17, endMethod #68/4bits = 17 elemtents in the array. once the counter is > that were done 
		move $t0, $zero #reset these variables for next pass 
		move $t1, $zero #i variable 
		addi $t2, $zero, 4 #j 
		
			#load 2 values into temp registers 
		loop_2:
			lw  $t3, array($t1) #a[i]
			lw $t4, array($t2) #a[i + 1] 
			ble $t3, $t4, update #if t3 is already less than, dont do anything and update values then try again 
			#otherwise swap 
			sw $t3, array($t2) #swap the values in the array 
			sw $t4, array($t1)
		
		update: 	
			addi $t0, $t0, 1
			addi $t1, $t1, 4
			addi $t2, $t2, 4
			blt $t0, 17, loop_2 #if 
			addi $t5, $t5, 1
			j loop_1 # return to the top with updated variables 
		

	endMethod: 
		#return to main 
		jr $ra 



lw $t1, 0($t0) #move the first element to temp
lw $t2, 4($t0) #second element to 2nd temp 
sw $t2, 0($t0)
sw $t1, 4($t0)
